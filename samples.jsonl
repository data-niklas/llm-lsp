{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[j] - numbers[i])\n            if diff < threshold:\n                return True\n    "}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n#separate_paren_groups(\"((()))\") #separate_paren_groups(\"((()))\")"}
{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    # Get the largest integer lesser or equal to the input number\n    int_part = math.floor(number)\n\n    # Calculcate the leftr over fractional part as a decimal\n    frac_part = abs(number - int_part)"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n# This solution uses two pointers (i & j) to iterate through both lists simultaneously. The first pointer i iterates over the deposits array while the second pointer j iterates over the withdrawals array. At each step we check whether the current sum of balances fallsbelow zero or not. If yes then we immediately return true else false after completing all iterations."}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    # Calculate sum of all elements\n    total = sum(numbers)\n\n    # Find length of list to divide by later\n    len_list = len(numbers)\n\n    # Divide sum by length of list for arithmetic mean\n    avg = total / len_list\n\n    # Initialize variable to store deviation values\n    devs = []\n\n    # Iterate through every value in the original list\n    for num in numbers:\n        # Append absolute distance from current point to mean_absolute_deviation()'s argument \"avg\" into devs[] array\n        devs.append(abs(num - avg))\n\n    # Return the calculated mean_absolute_deviation as an integer rounded down to its nearest whole number"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    result = []\n    for i in range(len(intersperse)):\n        if numbers == None or len(intersperse) < 0:\n            raise ValueError(\"Invalid arguments\")\n        "}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through all characters in paren_string and check if they're opening or closing parenthesis\n    for char in paren_string:\n        if char == '(':\n            # If it's an open bracket, increment the depth counter\n            depth += 1\n            \n        elif char == ')':\n            # If it's a close bracket, decrement the depth counter\n            depth -= 1\n        \n        else:\n            continue\n        \n        # Add the current depth value to the result list when we encounter whitespace character\n        if char == ' ':\n            result.append(depth)\n    \n    return result"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n    #filter_by_substring('filter_by_substring','filter_by_substring')"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n# This is an incomplete function that does not work as expected because it returns only one value instead of two values inside a tuple."}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    result = []\n    max_value = None\n\n    for number in numbers:\n        if max_value is None or number > max_value:\n            max_value = number\n        result.append(max_value)\n    \n    return result"}
{"task_id": "HumanEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # find the length of the longest postfix of s_rev that is also a prefix of s_rev\n    rev = string[::-1]  # reversed version of `s`\n    i_max, j_min = len(rev), 0   # initialize variables for loop bounds and indices into strings\n    \n    while (i_max > j_min):      # check whether there exists an index such that both conditions hold simultaneously; this will be true only when we have found our answer\n        if (is_palindrome(rev[:i_max])):       #is_palindrome returns True or False based on input parameter\n            break                              #if it does then exit out of the function as you know what you need to do next\n        \n        else:\n            \n            i_max -= 1                #otherwise decrement max value by one so that new iteration can start from previous position in outer loop\n    \n    result = \"\"               #make_palindrome returns empty string because no valid solution was found\n    \n    if ((is_palindrome(rev[:i_max])==True)):          #is_palindrome returns True or False based on input parameter\n        result += rev[:j_min+is_palindrome(rev[:is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome(is_palindrome"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # Initialize an empty list to store the results\n    res = []\n    \n    for i in range(len(string_xor)):\n        if a[string_xor][string_xor] == \"1\":\n            res += [\"1\"]\n        else:\n            res += [\"0\"]\n            \n    return \"\".join(res)"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n# This function takes an array as its argument and returns the element that appears most frequently in it. If there is more than one such element, return any one of them. Assume all elements in the array are non-negative integers."}
{"task_id": "HumanEval/13", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    if a == 0 or b == 0:\n        raise ValueError(\"Invalid input\")\n\n    while True:\n        remainder = a % b\n        if remainder == 0:\n            break\n        else:\n            a = b\n            b = remainder"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    # Initialize an empty list to store the results\n    result = []\n    \n    for i in range(len(string)):\n        result.append(string[:i+1]) "}
{"task_id": "HumanEval/15", "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n    # Initialize an emptystring to store our result in it\n    sequence = ''\n    \n    for i in range(n):\n        if len(string_sequence) == 0 or (string_sequence[-1]) != (' ') :string_sequence += \" \";}\n        \n        #string_sequence += f\"{i}\"string_sequence +=string_sequence +string_sequence+string_sequence;string_sequence+=string_sequence;}returnstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstringstring"}
{"task_id": "HumanEval/16", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    # Convert all characters to lowercase for comparison purposes\n    chars = set([c_lower for c_upper in string])\n    print(\"Distinct Characters:\", *chars, sep=', ')"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n# Write your solution here"}
{"task_id": "HumanEval/18", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    count = 0\n    for i in range(len(substring)):\n        if string[: len(substring)] == substring:\n            count += 1\n            string = string[1:]\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # split input into list of individual digits\n    nums = numbers.split()\n    \n    #sort_numbers in ascending order using builtin function sorted \n    sorted_nums=sorted_nums=[int(i) for i in nums]\n  \n    # join back together as single string separated by spaces\n    result=' '.join([str(x)for x in sorted_nums])\n    print (result)"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Sort the input list in ascending order\n    sorted_list = sorted(numbers)\n    \n    smallest_difference = abs(sorted_list[0] - sorted_list[1])\n    index_first_element = 0\n    index_second_element = 1\n    \n    for i_index, current_number in enumerate(sorted_list):\n        difference = abs(current_number - sorted_list[i_index + 1])\n        \n        if difference < smallest_difference:\n            smallest_difference = difference\n            \n            index_first_element = i_index\n            index_second_element = i_index + 1\n                  \n    first_element = sorted_list[index_first_element]\n    second_element = sorted_list[index_second_element]\n    \n    return first_element, second_element"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    # Calculate minimum value in input array\n    min = float(\"-inf\")\n    \n    for num in numbers:\n        if num < min:\n            min = num\n            \n    # Calculate range between maximum and minimum values\n    max = float(\"+inf\")\n        \n    for num in numbers:\n        if num > max:\n            max = num\n                  \n    # Apply scaling factor based on calculated range\n    scaled_nums = []\n    \n    for num in numbers:\n        scaled_nums.append((num - min)/(max - min))"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n    #filter_integers function implementation here"}
{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\n    # Your Code Here"}
{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n\n    for i in range(int((n ** .5))):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n# This is an incomplete implementation that only handles some special cases and does not handle negative numbers or non-integer inputs correctly."}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    # Create an empty set to store unique numbers\n    seen = set()\n    \n    # Iterate over each number and check if it is already present in seen\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            \n    # Return the sorted result using sort method\n    return sorted(seen)"}
{"task_id": "HumanEval/27", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    "}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n    result = \"\"\n    for s in strings:\n        result += s\n    "}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n    #filter_by_prefix('filter_by_prefix'.split(),'filter_by_prefix')[0])"}
{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n    # Filter out negative values and keep only positive ones\n    return list(filter(lambda x: x > 0, l))"}
{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n#is_prime function definition ends here"}
